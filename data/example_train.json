{'mnist_1': {'id': 'mnist_1', 'name': 'MNIST 1', 'type': {'_class': 'datasets', 'name': 'Dataset'}, 'pos': {'x': 292, 'y': 119, 'offsetX': 42, 'offsetY': 20}, 'connections': {'inbound': [], 'outbound': ['input_1']}, 'width': 84, 'arguments': {'dataset': {'value': '"""\nNote : Don\'t change dataset id.\nAll the required packages have been imported with their standard namespaces.\n\ntensorflow as tf\nkeras as keras\npandas as pd\nnumpy as np\n\nfrom sklearn.model_selection , train_test_split\n"""\n\n#dataset id=mnist_1\nclass Dataset:\n    """\n    Dataset will be used in training \n\n    The dataset object needs to have following attributes\n\n    train_x : np.ndarray -> Training features\n    train_y : np.ndarray -> Training labels \n    test_x : np.ndarray -> Testing features\n    test_y : np.ndarray -> Testing labels\n\n    validate : bool -> Weather use validation data or not\n\n    batch_size : int -> Batch size\n    epochs : int -> Number of epochs\n    batches : int -> Number of batches ( Will be calculated automatically )\n    """\n    train_x = None\n    test_x = None\n    train_y = None\n    test_y = None\n\n    validate = True\n\n    def __init__(self) -> None:\n        """\n        Load dataset and set required variables.\n        """\n\n        (X,Y),(x,y) = keras.datasets.mnist.load_data()\n\n        self.train_x = X.reshape(-1,28, 28, 1) / 255\n        self.train_y = keras.utils.to_categorical(Y)\n        self.test_x = X.reshape(-1,28, 28, 1) / 255\n        self.test_y = keras.utils.to_categorical(Y)\n    \n# Do not change the anything.\nmnist_1 = Dataset()\n#end-dataset id=mnist_1\n                    ', 'type': 'dataset', 'render': 'dataset'}}}, 'input_1': {'id': 'input_1', 'name': 'Input 1', 'type': {'name': 'Input', '_class': 'layers'}, 'pos': {'x': 300, 'y': 215, 'offsetX': 42, 'offsetY': 20}, 'connections': {'inbound': ['mnist_1'], 'outbound': ['mobilenet_1']}, 'width': 84, 'arguments': {'shape': {'value': '( 224 ,224, 3 )', 'type': 'str', 'render': 'text', 'options': 'shape'}, 'batch_size': {'value': 'None', 'type': 'str', 'render': 'text', 'options': 'size'}, 'name': {'value': 'None', 'type': 'str', 'render': 'text', 'options': 'name'}, 'dtype': {'value': 'None', 'type': 'str', 'render': 'text', 'options': 'dtype'}, 'sparse': {'value': 'False', 'type': 'str', 'render': 'list', 'options': 'bool'}, 'tensor': {'value': 'None', 'type': 'str', 'render': 'text', 'options': 'tensor'}, 'ragged': {'value': 'False', 'type': 'str', 'render': 'list', 'options': 'bool'}}}, 'dense_1': {'id': 'dense_1', 'name': 'Dense 1', 'type': {'name': 'Dense', '_class': 'layers'}, 'pos': {'x': 311, 'y': 492, 'offsetX': 42, 'offsetY': 20}, 'connections': {'inbound': ['globalaveragepooling2d_1'], 'outbound': ['model_1']}, 'width': 84, 'arguments': {'units': {'value': '10', 'type': 'str', 'render': 'text', 'options': 'units'}, 'activation': {'value': 'softmax', 'type': 'str', 'render': 'list', 'options': 'activation'}, 'use_bias': {'value': 'True', 'type': 'str', 'render': 'list', 'options': 'bool'}, 'kernel_regularizer': {'value': 'None', 'type': 'str', 'render': 'list', 'options': 'regularizer'}, 'bias_regularizer': {'value': 'None', 'type': 'str', 'render': 'list', 'options': 'regularizer'}, 'activity_regularizer': {'value': 'None', 'type': 'str', 'render': 'list', 'options': 'regularizer'}, 'kernel_constraint': {'value': 'None', 'type': 'str', 'render': 'list', 'options': 'constraint'}, 'bias_constraint': {'value': 'None', 'type': 'str', 'render': 'list', 'options': 'constraint'}}}, 'globalaveragepooling2d_1': {'id': 'globalaveragepooling2d_1', 'name': 'GlobalAveragePooling2D 1', 'type': {'name': 'GlobalAveragePooling2D', '_class': 'layers'}, 'pos': {'x': 201, 'y': 404, 'offsetX': 144, 'offsetY': 20}, 'connections': {'inbound': ['mobilenet_1'], 'outbound': ['dense_1']}, 'width': 288, 'arguments': {'data_format': {'value': 'None', 'type': 'str', 'render': 'text', 'options': 'format'}}}, 'model_1': {'id': 'model_1', 'name': 'Model 1', 'type': {'name': 'Model', '_class': 'models'}, 'pos': {'x': 318, 'y': 584, 'offsetX': 42, 'offsetY': 20}, 'connections': {'inbound': ['dense_1'], 'outbound': ['compile_1']}, 'width': 84, 'arguments': {}}, 'compile_1': {'id': 'compile_1', 'name': 'Compile 1', 'type': {'name': 'Compile', '_class': 'models'}, 'pos': {'x': 311, 'y': 672, 'offsetX': 54, 'offsetY': 20}, 'connections': {'inbound': ['model_1'], 'outbound': ['train_1']}, 'width': 108, 'arguments': {'optmizer': {'value': 'adam', 'type': 'str', 'render': 'list', 'options': 'optimizer'}, 'loss': {'value': 'categorical_crossentropy', 'type': 'str', 'render': 'list', 'options': 'loss'}, 'metrics': {'value': ['categorical_accuracy'], 'type': 'str', 'render': 'checkbox', 'options': 'metrics'}}}, 'train_1': {'id': 'train_1', 'name': 'Train 1', 'type': {'name': 'Train', '_class': 'models'}, 'pos': {'x': 356, 'y': 802, 'offsetX': 42, 'offsetY': 20}, 'connections': {'inbound': ['compile_1'], 'outbound': []}, 'width': 84, 'arguments': {'batch_size': {'value': '32', 'type': 'int', 'render': 'text', 'options': 'batch_size'}, 'epochs': {'value': '3', 'type': 'int', 'render': 'text', 'options': 'batch_size'}}}, 'mobilenet_1': {'id': 'mobilenet_1', 'name': 'MobileNet 1', 'type': {'name': 'Application', '_class': 'MobileNet'}, 'pos': {'x': 283, 'y': 309, 'offsetX': 66, 'offsetY': 20}, 'connections': {'inbound': ['input_1'], 'outbound': ['globalaveragepooling2d_1']}, 'width': 132, 'arguments': {'weights': {'value': 'imagenet', 'type': 'str', 'render': 'text', 'options': 'optimizer'}}}, 'train_config': {'dataset': {'id': 'mnist_1', 'value': '"""\nNote : Don\'t change dataset id.\nAll the required packages have been imported with their standard namespaces.\n\ntensorflow as tf\nkeras as keras\npandas as pd\nnumpy as np\n\nfrom sklearn.model_selection , train_test_split\n"""\n\n#dataset id=mnist_1\nclass Dataset:\n    """\n    Dataset will be used in training \n\n    The dataset object needs to have following attributes\n\n    train_x : np.ndarray -> Training features\n    train_y : np.ndarray -> Training labels \n    test_x : np.ndarray -> Testing features\n    test_y : np.ndarray -> Testing labels\n\n    validate : bool -> Weather use validation data or not\n\n    batch_size : int -> Batch size\n    epochs : int -> Number of epochs\n    batches : int -> Number of batches ( Will be calculated automatically )\n    """\n    train_x = None\n    test_x = None\n    train_y = None\n    test_y = None\n\n    validate = True\n\n    def __init__(self) -> None:\n        """\n        Load dataset and set required variables.\n        """\n\n        (X,Y),(x,y) = keras.datasets.mnist.load_data()\n\n        self.train_x = X.reshape(-1,28, 28, 1) / 255\n        self.train_y = keras.utils.to_categorical(Y)\n        self.test_x = X.reshape(-1,28, 28, 1) / 255\n        self.test_y = keras.utils.to_categorical(Y)\n    \n# Do not change the anything.\nmnist_1 = Dataset()\n#end-dataset id=mnist_1\n                    '}, 'optimizer': None, 'loss': None, 'callbacks': [], 'model': {'id': 'model_1', 'name': 'Model 1', 'type': {'name': 'Model', '_class': 'models'}, 'pos': {'x': 318, 'y': 584, 'offsetX': 42, 'offsetY': 20}, 'connections': {'inbound': ['dense_1'], 'outbound': ['compile_1']}, 'width': 84, 'arguments': {}}, 'compile': {'id': 'compile_1', 'name': 'Compile 1', 'type': {'name': 'Compile', '_class': 'models'}, 'pos': {'x': 311, 'y': 672, 'offsetX': 54, 'offsetY': 20}, 'connections': {'inbound': ['model_1'], 'outbound': ['train_1']}, 'width': 108, 'arguments': {'optmizer': {'value': 'adam', 'type': 'str', 'render': 'list', 'options': 'optimizer'}, 'loss': {'value': 'categorical_crossentropy', 'type': 'str', 'render': 'list', 'options': 'loss'}, 'metrics': {'value': ['categorical_accuracy'], 'type': 'str', 'render': 'checkbox', 'options': 'metrics'}}}, 'train': {'id': 'train_1', 'name': 'Train 1', 'type': {'name': 'Train', '_class': 'models'}, 'pos': {'x': 356, 'y': 802, 'offsetX': 42, 'offsetY': 20}, 'connections': {'inbound': ['compile_1'], 'outbound': []}, 'width': 84, 'arguments': {'batch_size': {'value': '32', 'type': 'int', 'render': 'text', 'options': 'batch_size'}, 'epochs': {'value': '3', 'type': 'int', 'render': 'text', 'options': 'batch_size'}}}}, 'input_nodes': ['input_1'], 'levels': [{'input_1'}, {'mobilenet_1'}, {'globalaveragepooling2d_1'}, {'dense_1'}, {'model_1'}, {'compile_1'}, {'train_1'}, set(), set(), set()]}