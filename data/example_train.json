{'mnist_13': {'name': 'MNIST 13', 'type': {'_class': 'datasets', 'name': 'Dataset'}, 'arguments': {'dataset': {'value': '"""\nNote : Don\'t change dataset id.\nAll the required packages have been imported with their standard namespaces.\n\ntensorflow as tf\nkeras as keras\npandas as pd\nnumpy as np\n\nfrom sklearn.model_selection , train_test_split\n"""\n\n#dataset id=mnist_13\nclass Dataset:\n    """\n    Dataset will be used in training \n\n    The dataset object needs to have following attributes\n\n    train_x : np.ndarray -> Training features\n    train_y : np.ndarray -> Training labels \n    test_x : np.ndarray -> Testing features\n    test_y : np.ndarray -> Testing labels\n\n    validate : bool -> Weather use validation data or not\n\n    batch_size : int -> Batch size\n    epochs : int -> Number of epochs\n    batches : int -> Number of batches ( Will be calculated automatically )\n    """\n    train_x = None\n    test_x = None\n    train_y = None\n    test_y = None\n\n    validate = True\n\n    def __init__(self) -> None:\n        """\n        Load dataset and set required variables.\n        """\n\n        (X,Y),(x,y) = keras.datasets.mnist.load_data()\n\n        self.train_x = X.reshape(-1,784) / 255\n        self.train_y = keras.utils.to_categorical(Y)\n        self.test_x = X.reshape(-1,784) / 255\n        self.test_y = keras.utils.to_categorical(Y)\n    \n# Do not change the anything.\nmnist_13 = Dataset()\n#end-dataset id=mnist_13\n                    ', 'type': 'dataset', 'render': 'dataset'}}, 'id': 'mnist_13', 'pos': {'x': 177, 'y': 28, 'offsetX': 0, 'offsetY': 0}, 'connections': {'inbound': [], 'outbound': ['input_12']}, 'width': 80}, 'train_config': {'dataset': {'id': 'mnist_13', 'value': '"""\nNote : Don\'t change dataset id.\nAll the required packages have been imported with their standard namespaces.\n\ntensorflow as tf\nkeras as keras\npandas as pd\nnumpy as np\n\nfrom sklearn.model_selection , train_test_split\n"""\n\n#dataset id=mnist_13\nclass Dataset:\n    """\n    Dataset will be used in training \n\n    The dataset object needs to have following attributes\n\n    train_x : np.ndarray -> Training features\n    train_y : np.ndarray -> Training labels \n    test_x : np.ndarray -> Testing features\n    test_y : np.ndarray -> Testing labels\n\n    validate : bool -> Weather use validation data or not\n\n    batch_size : int -> Batch size\n    epochs : int -> Number of epochs\n    batches : int -> Number of batches ( Will be calculated automatically )\n    """\n    train_x = None\n    test_x = None\n    train_y = None\n    test_y = None\n\n    validate = True\n\n    def __init__(self) -> None:\n        """\n        Load dataset and set required variables.\n        """\n\n        (X,Y),(x,y) = keras.datasets.mnist.load_data()\n\n        self.train_x = X.reshape(-1,784) / 255\n        self.train_y = keras.utils.to_categorical(Y)\n        self.test_x = X.reshape(-1,784) / 255\n        self.test_y = keras.utils.to_categorical(Y)\n    \n# Do not change the anything.\nmnist_13 = Dataset()\n#end-dataset id=mnist_13\n                    '}, 'optimizer': None, 'loss': None, 'callbacks': [], 'model': {'name': 'Model 8', 'type': {'name': 'Model', '_class': 'models'}, 'arguments': {}, 'id': 'model_8', 'pos': {'x': 216, 'y': 252, 'offsetX': 0, 'offsetY': 0}, 'connections': {'inbound': ['dense_3'], 'outbound': ['compile_8']}, 'width': 70}, 'compile': {'name': 'Compile 8', 'type': {'name': 'Compile', '_class': 'models'}, 'arguments': {'optmizer': {'value': 'adam', 'type': 'str', 'render': 'list', 'options': 'optimizer'}, 'loss': {'value': 'categorical_crossentropy', 'type': 'str', 'render': 'list', 'options': 'loss'}, 'metrics': {'value': ['categorical_accuracy'], 'type': 'str', 'render': 'checkbox', 'options': 'metrics'}}, 'id': 'compile_8', 'pos': {'x': 219, 'y': 328, 'offsetX': 0, 'offsetY': 0}, 'connections': {'inbound': ['model_8'], 'outbound': ['train_10']}, 'width': 90}, 'train': {'name': 'Train 10', 'type': {'name': 'Train', '_class': 'models'}, 'arguments': {'batch_size': {'value': '32', 'type': 'int', 'render': 'text', 'options': 'batch_size'}, 'epochs': {'value': '3', 'type': 'int', 'render': 'text', 'options': 'batch_size'}}, 'id': 'train_10', 'pos': {'x': 241, 'y': 415, 'offsetX': 0, 'offsetY': 0}, 'connections': {'inbound': ['compile_8'], 'outbound': []}, 'width': 80}}, 'input_12': {'name': 'Input 12', 'type': {'name': 'Input', '_class': 'layers'}, 'arguments': {'shape': {'value': '( 784, )', 'type': 'str', 'render': 'text', 'options': 'shape'}, 'batch_size': {'value': 'None', 'type': 'str', 'render': 'text', 'options': 'size'}, 'name': {'value': 'None', 'type': 'str', 'render': 'text', 'options': 'name'}, 'dtype': {'value': 'None', 'type': 'str', 'render': 'text', 'options': 'dtype'}, 'sparse': {'value': 'False', 'type': 'str', 'render': 'list', 'options': 'bool'}, 'tensor': {'value': 'None', 'type': 'str', 'render': 'text', 'options': 'tensor'}, 'ragged': {'value': 'False', 'type': 'str', 'render': 'list', 'options': 'bool'}}, 'doc': 'https://keras.io/api/layers/core_layers/input', 'id': 'input_12', 'pos': {'x': 193, 'y': 103, 'offsetX': 0, 'offsetY': 0}, 'connections': {'inbound': ['mnist_13'], 'outbound': ['dense_3']}, 'width': 80}, 'dense_3': {'name': 'Dense 3', 'type': {'name': 'Dense', '_class': 'layers'}, 'arguments': {'units': {'value': '10', 'type': 'str', 'render': 'text', 'options': 'units'}, 'activation': {'value': 'softmax', 'type': 'str', 'render': 'list', 'options': 'activation'}, 'use_bias': {'value': 'False', 'type': 'str', 'render': 'list', 'options': 'bool'}, 'kernel_regularizer': {'value': 'None', 'type': 'str', 'render': 'list', 'options': 'regularizer'}, 'bias_regularizer': {'value': 'None', 'type': 'str', 'render': 'list', 'options': 'regularizer'}, 'activity_regularizer': {'value': 'None', 'type': 'str', 'render': 'list', 'options': 'regularizer'}, 'kernel_constraint': {'value': 'None', 'type': 'str', 'render': 'list', 'options': 'constraint'}, 'bias_constraint': {'value': 'None', 'type': 'str', 'render': 'list', 'options': 'constraint'}}, 'doc': 'https://keras.io/api/layers/core_layers/dense', 'id': 'dense_3', 'pos': {'x': 206, 'y': 178, 'offsetX': 0, 'offsetY': 0}, 'connections': {'inbound': ['input_12'], 'outbound': ['model_8']}, 'width': 70}, 'model_8': {'name': 'Model 8', 'type': {'name': 'Model', '_class': 'models'}, 'arguments': {}, 'id': 'model_8', 'pos': {'x': 216, 'y': 252, 'offsetX': 0, 'offsetY': 0}, 'connections': {'inbound': ['dense_3'], 'outbound': ['compile_8']}, 'width': 70}, 'compile_8': {'name': 'Compile 8', 'type': {'name': 'Compile', '_class': 'models'}, 'arguments': {'optmizer': {'value': 'adam', 'type': 'str', 'render': 'list', 'options': 'optimizer'}, 'loss': {'value': 'categorical_crossentropy', 'type': 'str', 'render': 'list', 'options': 'loss'}, 'metrics': {'value': ['categorical_accuracy'], 'type': 'str', 'render': 'checkbox', 'options': 'metrics'}}, 'id': 'compile_8', 'pos': {'x': 219, 'y': 328, 'offsetX': 0, 'offsetY': 0}, 'connections': {'inbound': ['model_8'], 'outbound': ['train_10']}, 'width': 90}, 'train_10': {'name': 'Train 10', 'type': {'name': 'Train', '_class': 'models'}, 'arguments': {'batch_size': {'value': '32', 'type': 'int', 'render': 'text', 'options': 'batch_size'}, 'epochs': {'value': '3', 'type': 'int', 'render': 'text', 'options': 'batch_size'}}, 'id': 'train_10', 'pos': {'x': 241, 'y': 415, 'offsetX': 0, 'offsetY': 0}, 'connections': {'inbound': ['compile_8'], 'outbound': []}, 'width': 80}, 'input_nodes': ['input_12'], 'custom_nodes': [], 'levels': [['input_12'], ['dense_3'], ['model_8'], ['compile_8'], ['train_10']]}