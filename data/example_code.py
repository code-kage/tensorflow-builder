#-*- Code generated by Tensorflow GUI -*-
#import
import pandas as pd
import numpy as np
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers,optimizers,losses,metrics,callbacks
#end-import

"""
Note : Don't change dataset id.
All the required packages have been imported with their standard namespaces.

tensorflow as tf
keras as keras
pandas as pd
numpy as np

from sklearn.model_selection , train_test_split
"""

#dataset id=boston_housing_2
class Dataset:
    """
    Dataset will be used in training 

    The dataset object needs to have following attributes

    train_x : np.ndarray -> Training features
    train_y : np.ndarray -> Training labels 
    test_x : np.ndarray -> Testing features
    test_y : np.ndarray -> Testing labels

    validate : bool -> Weather use validation data or not

    batch_size : int -> Batch size
    epochs : int -> Number of epochs
    batches : int -> Number of batches ( Will be calculated automatically )
    """
    train_x = None
    test_x = None
    train_y = None
    test_y = None

    validate = True

    def __init__(self) -> None:
        """
        Load dataset and set required variables.
        """
        
        (X,Y),(x,y)  = keras.datasets.boston_housing.load_data()
        
        self.train_x = X 
        self.train_y = Y
        self.test_x = x 
        self.test_y = y
        
        self.x_shape = (13,)

# Do not change the anything.
boston_housing_2 = Dataset()
#end-dataset id=boston_housing_2
                    
input_1 = layers.Input(
    shape=(13,),
    batch_size=None,
    name=None,
    dtype=None,
    sparse=False,
    tensor=None,
    ragged=False,
) #end-input_1


dense_1 = layers.Dense(
    units=4,
    activation='relu',
    use_bias=True,
    kernel_regularizer=None,
    bias_regularizer=None,
    activity_regularizer=None,
    kernel_constraint=None,
    bias_constraint=None,
)(input_1) #end-dense_1


dense_2 = layers.Dense(
    units=1,
    activation='relu',
    use_bias=True,
    kernel_regularizer=None,
    bias_regularizer=None,
    activity_regularizer=None,
    kernel_constraint=None,
    bias_constraint=None,
)(dense_1) #end-dense_2


model_1 = keras.Model(
    [ input_1, ],
    [ dense_2, ]
) #end-model_1



model_1.compile(
    optimizer='rmsprop',
    loss='mean_absolute_error',
    metrics=None
) #end-compile_1



model_1.fit(
    x=boston_housing_2.train_x,
    y=boston_housing_2.train_y,
    batch_size=8,
    epochs=1,
    callbacks=[ tfgui,  ]
) #end-train_1

