#-*- Code generated by Tensorflow GUI -*-
#import
import pandas as pd
import numpy as np
import cv2
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers,optimizers,losses,metrics,callbacks, applications

from concurrent.futures import ThreadPoolExecutor
from glob import glob
from gc import collect
#end-import

"""
Note : Don't change dataset id.
All the required packages have been imported with their standard namespaces.

tensorflow as tf
keras as keras
pandas as pd
numpy as np

from sklearn.model_selection , train_test_split
"""

#dataset id=mnist_13
class Dataset:
    """
    Dataset will be used in training 

    The dataset object needs to have following attributes

    train_x : np.ndarray -> Training features
    train_y : np.ndarray -> Training labels 
    test_x : np.ndarray -> Testing features
    test_y : np.ndarray -> Testing labels

    validate : bool -> Weather use validation data or not

    batch_size : int -> Batch size
    epochs : int -> Number of epochs
    batches : int -> Number of batches ( Will be calculated automatically )
    """
    train_x = None
    test_x = None
    train_y = None
    test_y = None

    validate = True

    def __init__(self) -> None:
        """
        Load dataset and set required variables.
        """

        (X,Y),(x,y) = keras.datasets.mnist.load_data()

        self.train_x = X.reshape(-1,784) / 255
        self.train_y = keras.utils.to_categorical(Y)
        self.test_x = X.reshape(-1,784) / 255
        self.test_y = keras.utils.to_categorical(Y)
    
# Do not change the anything.
mnist_13 = Dataset()
#end-dataset id=mnist_13
                    

#start-modeldef

input_12 = layers.Input(
    shape=(784,),
    batch_size=None,
    name=None,
    dtype=None,
    sparse=False,
    tensor=None,
    ragged=False,
) #end-input_12

dense_3 = layers.Dense(
    units=10,
    activation='softmax',
    use_bias=False,
    kernel_regularizer=None,
    bias_regularizer=None,
    activity_regularizer=None,
    kernel_constraint=None,
    bias_constraint=None,
)(input_12) #end-dense_3

model_8 = keras.Model(
    [ input_12, ],
    [ dense_3, ]
) #end-model_8

#end-modeldef

model_8.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=["categorical_accuracy"]
) #end-compile_8


model_8.fit(
    x=mnist_13.train_x,
    y=mnist_13.train_y,
    batch_size=32,
    epochs=3,
    validation_data=( mnist_13.test_x, mnist_13.test_y ),
    callbacks=[ tfgui,  ],
    verbose=0
) #end-train_10
