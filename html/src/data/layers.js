import datasets from "./datasets";
import optimizers from "./optimizers";
import callbaacks from "./callbacks";
import applications from "./applications";

const layers = {
  datasets: datasets,
  core_layers: {
    name: "Core layers",
    layers: [
      {
        name: "Input",
        type: { name: "Input", object_class: "layers" },
        arguments: {
          shape: {
            value: "None",
            type: "tuple",
            render: "text",
            options: "shape",
          },
          batch_size: {
            value: "None",
            type: "str",
            render: "text",
            options: "size",
          },
          name: { value: "None", type: "str", render: "text", options: "name" },
          dtype: {
            value: "None",
            type: "str",
            render: "text",
            options: "dtype",
          },
          sparse: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          tensor: {
            value: "None",
            type: "str",
            render: "text",
            options: "tensor",
          },
          ragged: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
        },
      },
      {
        name: "Dense",
        type: { name: "Dense", object_class: "layers" },
        arguments: {
          units: {
            value: "required",
            type: "str",
            render: "text",
            options: "units",
          },
          activation: {
            value: "None",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          kernel_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          kernel_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          kernel_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
        },
      },
      {
        name: "Activation",
        type: { name: "Activation", object_class: "layers" },
        arguments: {
          activation: {
            value: "required",
            type: "str",
            render: "list",
            options: "activation",
          },
        },
      },
      {
        name: "Embedding",
        type: { name: "Embedding", object_class: "layers" },
        arguments: {
          input_dim: {
            value: "required",
            type: "str",
            render: "text",
            options: "dim",
          },
          output_dim: {
            value: "required",
            type: "str",
            render: "text",
            options: "dim",
          },
          embeddings_initializer: {
            value: "uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          embeddings_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          embeddings_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          mask_zero: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          input_length: {
            value: "None",
            type: "str",
            render: "text",
            options: "length",
          },
        },
      },
      {
        name: "Masking",
        type: { name: "Masking", object_class: "layers" },
        arguments: {
          mask_value: {
            value: "0",
            type: "int",
            render: "text",
            options: "value",
          },
        },
      },
      {
        name: "Lambda",
        type: { name: "Lambda", object_class: "layers" },
        arguments: {
          function: {
            value: "required",
            type: "callable",
            render: "text",
            options: "function",
          },
          output_shape: {
            value: "None",
            type: "str",
            render: "text",
            options: "shape",
          },
          mask: { value: "None", type: "str", render: "text", options: "mask" },
          arguments: {
            value: "None",
            type: "str",
            render: "text",
            options: "arguments",
          },
        },
      },
    ],
  },
  convolution_layers: {
    name: "Convolution layers",
    layers: [
      {
        name: "Conv1D",
        type: { name: "Conv1D", object_class: "layers" },
        arguments: {
          filters: {
            value: "required",
            type: "str",
            render: "text",
            options: "filters",
          },
          kernel_size: {
            value: "required",
            type: "str",
            render: "text",
            options: "size",
          },
          strides: {
            value: "1",
            type: "int",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "channels_last",
            type: "str",
            render: "text",
            options: "format",
          },
          dilation_rate: {
            value: "1",
            type: "int",
            render: "text",
            options: "rate",
          },
          groups: {
            value: "1",
            type: "int",
            render: "text",
            options: "groups",
          },
          activation: {
            value: "None",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          kernel_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          kernel_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          kernel_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
        },
      },
      {
        name: "Conv2D",
        type: { name: "Conv2D", object_class: "layers" },
        arguments: {
          filters: {
            value: "required",
            type: "str",
            render: "text",
            options: "filters",
          },
          kernel_size: {
            value: "required",
            type: "str",
            render: "text",
            options: "size",
          },
          strides: {
            value: "(1, 1)",
            type: "tuple",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
          dilation_rate: {
            value: "(1, 1)",
            type: "tuple",
            render: "text",
            options: "rate",
          },
          groups: {
            value: "1",
            type: "int",
            render: "text",
            options: "groups",
          },
          activation: {
            value: "None",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          kernel_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          kernel_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          kernel_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
        },
      },
      {
        name: "Conv3D",
        type: { name: "Conv3D", object_class: "layers" },
        arguments: {
          filters: {
            value: "required",
            type: "str",
            render: "text",
            options: "filters",
          },
          kernel_size: {
            value: "required",
            type: "str",
            render: "text",
            options: "size",
          },
          strides: {
            value: "(1, 1, 1)",
            type: "tuple",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
          dilation_rate: {
            value: "(1, 1, 1)",
            type: "tuple",
            render: "text",
            options: "rate",
          },
          groups: {
            value: "1",
            type: "int",
            render: "text",
            options: "groups",
          },
          activation: {
            value: "None",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          kernel_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          kernel_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          kernel_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
        },
      },
      {
        name: "SeparableConv1D",
        type: { name: "SeparableConv1D", object_class: "layers" },
        arguments: {
          filters: {
            value: "required",
            type: "str",
            render: "text",
            options: "filters",
          },
          kernel_size: {
            value: "required",
            type: "str",
            render: "text",
            options: "size",
          },
          strides: {
            value: "1",
            type: "int",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
          dilation_rate: {
            value: "1",
            type: "int",
            render: "text",
            options: "rate",
          },
          depth_multiplier: {
            value: "1",
            type: "int",
            render: "text",
            options: "multiplier",
          },
          activation: {
            value: "None",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          depthwise_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          pointwise_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          depthwise_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          pointwise_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          depthwise_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          pointwise_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
        },
      },
      {
        name: "SeparableConv2D",
        type: { name: "SeparableConv2D", object_class: "layers" },
        arguments: {
          filters: {
            value: "required",
            type: "str",
            render: "text",
            options: "filters",
          },
          kernel_size: {
            value: "required",
            type: "str",
            render: "text",
            options: "size",
          },
          strides: {
            value: "(1, 1)",
            type: "tuple",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
          dilation_rate: {
            value: "(1, 1)",
            type: "tuple",
            render: "text",
            options: "rate",
          },
          depth_multiplier: {
            value: "1",
            type: "int",
            render: "text",
            options: "multiplier",
          },
          activation: {
            value: "None",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          depthwise_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          pointwise_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          depthwise_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          pointwise_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          depthwise_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          pointwise_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
        },
      },
      {
        name: "DepthwiseConv2D",
        type: { name: "DepthwiseConv2D", object_class: "layers" },
        arguments: {
          kernel_size: {
            value: "required",
            type: "str",
            render: "text",
            options: "size",
          },
          strides: {
            value: "(1, 1)",
            type: "tuple",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          depth_multiplier: {
            value: "1",
            type: "int",
            render: "text",
            options: "multiplier",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
          dilation_rate: {
            value: "(1, 1)",
            type: "tuple",
            render: "text",
            options: "rate",
          },
          activation: {
            value: "None",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          depthwise_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          depthwise_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          depthwise_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
        },
      },
      {
        name: "Conv2DTranspose",
        type: { name: "Conv2DTranspose", object_class: "layers" },
        arguments: {
          filters: {
            value: "required",
            type: "str",
            render: "text",
            options: "filters",
          },
          kernel_size: {
            value: "required",
            type: "str",
            render: "text",
            options: "size",
          },
          strides: {
            value: "(1, 1)",
            type: "tuple",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          output_padding: {
            value: "None",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
          dilation_rate: {
            value: "(1, 1)",
            type: "tuple",
            render: "text",
            options: "rate",
          },
          activation: {
            value: "None",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          kernel_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          kernel_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          kernel_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
        },
      },
      {
        name: "Conv3DTranspose",
        type: { name: "Conv3DTranspose", object_class: "layers" },
        arguments: {
          filters: {
            value: "required",
            type: "str",
            render: "text",
            options: "filters",
          },
          kernel_size: {
            value: "required",
            type: "str",
            render: "text",
            options: "size",
          },
          strides: {
            value: "(1, 1, 1)",
            type: "tuple",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          output_padding: {
            value: "None",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
          dilation_rate: {
            value: "(1, 1, 1)",
            type: "tuple",
            render: "text",
            options: "rate",
          },
          activation: {
            value: "None",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          kernel_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          kernel_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          kernel_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
        },
      },
    ],
  },
  pooling_layers: {
    name: "Pooling layers",
    layers: [
      {
        name: "MaxPooling1D",
        type: { name: "MaxPooling1D", object_class: "layers" },
        arguments: {
          pool_size: {
            value: "2",
            type: "int",
            render: "text",
            options: "size",
          },
          strides: {
            value: "None",
            type: "str",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "channels_last",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "MaxPooling2D",
        type: { name: "MaxPooling2D", object_class: "layers" },
        arguments: {
          pool_size: {
            value: "(2, 2)",
            type: "tuple",
            render: "text",
            options: "size",
          },
          strides: {
            value: "None",
            type: "str",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "MaxPooling3D",
        type: { name: "MaxPooling3D", object_class: "layers" },
        arguments: {
          pool_size: {
            value: "(2, 2, 2)",
            type: "tuple",
            render: "text",
            options: "size",
          },
          strides: {
            value: "None",
            type: "str",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "AveragePooling1D",
        type: { name: "AveragePooling1D", object_class: "layers" },
        arguments: {
          pool_size: {
            value: "2",
            type: "int",
            render: "text",
            options: "size",
          },
          strides: {
            value: "None",
            type: "str",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "channels_last",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "AveragePooling2D",
        type: { name: "AveragePooling2D", object_class: "layers" },
        arguments: {
          pool_size: {
            value: "(2, 2)",
            type: "tuple",
            render: "text",
            options: "size",
          },
          strides: {
            value: "None",
            type: "str",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "AveragePooling3D",
        type: { name: "AveragePooling3D", object_class: "layers" },
        arguments: {
          pool_size: {
            value: "(2, 2, 2)",
            type: "tuple",
            render: "text",
            options: "size",
          },
          strides: {
            value: "None",
            type: "str",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "GlobalMaxPooling1D",
        type: { name: "GlobalMaxPooling1D", object_class: "layers" },
        arguments: {
          data_format: {
            value: "channels_last",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "GlobalMaxPooling2D",
        type: { name: "GlobalMaxPooling2D", object_class: "layers" },
        arguments: {
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "GlobalMaxPooling3D",
        type: { name: "GlobalMaxPooling3D", object_class: "layers" },
        arguments: {
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "GlobalAveragePooling1D",
        type: { name: "GlobalAveragePooling1D", object_class: "layers" },
        arguments: {
          data_format: {
            value: "channels_last",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "GlobalAveragePooling2D",
        type: { name: "GlobalAveragePooling2D", object_class: "layers" },
        arguments: {
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "GlobalAveragePooling3D",
        type: { name: "GlobalAveragePooling3D", object_class: "layers" },
        arguments: {
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
    ],
  },
  recurrent_layers: {
    name: "Recurrent layers",
    layers: [
      {
        name: "LSTM",
        type: { name: "LSTM", object_class: "layers" },
        arguments: {
          units: {
            value: "required",
            type: "str",
            render: "text",
            options: "units",
          },
          activation: {
            value: "tanh",
            type: "str",
            render: "list",
            options: "activation",
          },
          recurrent_activation: {
            value: "sigmoid",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          kernel_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          recurrent_initializer: {
            value: "orthogonal",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          unit_forget_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          kernel_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          recurrent_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          kernel_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          recurrent_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          dropout: {
            value: "0",
            type: "int",
            render: "text",
            options: "dropout",
          },
          recurrent_dropout: {
            value: "0",
            type: "int",
            render: "text",
            options: "dropout",
          },
          return_sequences: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          return_state: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          go_backwards: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          stateful: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          time_major: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          unroll: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
        },
      },
      {
        name: "GRU",
        type: { name: "GRU", object_class: "layers" },
        arguments: {
          units: {
            value: "required",
            type: "str",
            render: "text",
            options: "units",
          },
          activation: {
            value: "tanh",
            type: "str",
            render: "list",
            options: "activation",
          },
          recurrent_activation: {
            value: "sigmoid",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          kernel_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          recurrent_initializer: {
            value: "orthogonal",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          kernel_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          recurrent_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          kernel_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          recurrent_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          dropout: {
            value: "0",
            type: "int",
            render: "text",
            options: "dropout",
          },
          recurrent_dropout: {
            value: "0",
            type: "int",
            render: "text",
            options: "dropout",
          },
          return_sequences: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          return_state: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          go_backwards: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          stateful: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          unroll: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          time_major: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          reset_after: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
        },
      },
      {
        name: "SimpleRNN",
        type: { name: "SimpleRNN", object_class: "layers" },
        arguments: {
          units: {
            value: "required",
            type: "str",
            render: "text",
            options: "units",
          },
          activation: {
            value: "tanh",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          kernel_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          recurrent_initializer: {
            value: "orthogonal",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          kernel_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          recurrent_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          kernel_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          recurrent_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          dropout: {
            value: "0",
            type: "int",
            render: "text",
            options: "dropout",
          },
          recurrent_dropout: {
            value: "0",
            type: "int",
            render: "text",
            options: "dropout",
          },
          return_sequences: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          return_state: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          go_backwards: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          stateful: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          unroll: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
        },
      },
      {
        name: "TimeDistributed",
        type: { name: "TimeDistributed", object_class: "layers" },
        arguments: {
          layer: {
            value: "required",
            type: "str",
            render: "text",
            options: "layer",
          },
        },
      },
      {
        name: "Bidirectional",
        type: { name: "Bidirectional", object_class: "layers" },
        arguments: {
          layer: {
            value: "required",
            type: "str",
            render: "text",
            options: "layer",
          },
          merge_mode: {
            value: "concat",
            type: "str",
            render: "text",
            options: "mode",
          },
          weights: {
            value: "None",
            type: "str",
            render: "text",
            options: "weights",
          },
          backward_layer: {
            value: "None",
            type: "str",
            render: "text",
            options: "layer",
          },
        },
      },
      {
        name: "ConvLSTM2D",
        type: { name: "ConvLSTM2D", object_class: "layers" },
        arguments: {
          filters: {
            value: "required",
            type: "str",
            render: "text",
            options: "filters",
          },
          kernel_size: {
            value: "required",
            type: "str",
            render: "text",
            options: "size",
          },
          strides: {
            value: "(1, 1)",
            type: "tuple",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
          dilation_rate: {
            value: "(1, 1)",
            type: "tuple",
            render: "text",
            options: "rate",
          },
          activation: {
            value: "tanh",
            type: "str",
            render: "list",
            options: "activation",
          },
          recurrent_activation: {
            value: "hard_sigmoid",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          kernel_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          recurrent_initializer: {
            value: "orthogonal",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          unit_forget_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          kernel_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          recurrent_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          kernel_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          recurrent_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          return_sequences: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          return_state: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          go_backwards: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          stateful: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          dropout: {
            value: "0",
            type: "int",
            render: "text",
            options: "dropout",
          },
          recurrent_dropout: {
            value: "0",
            type: "int",
            render: "text",
            options: "dropout",
          },
        },
      },
      {
        name: "RNN",
        type: { name: "RNN", object_class: "layers" },
        arguments: {
          cell: {
            value: "required",
            type: "str",
            render: "text",
            options: "cell",
          },
          return_sequences: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          return_state: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          go_backwards: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          stateful: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          unroll: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          time_major: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
        },
      },
    ],
  },
  preprocessing_layers: {
    name: "Preprocessing layers",
    layers: [
      {
        name: "TextVectorization",
        type: { name: "TextVectorization", object_class: "layers" },
        arguments: {
          max_tokens: {
            value: "None",
            type: "str",
            render: "text",
            options: "tokens",
          },
          standardize: {
            value: "lower_and_strip_punctuation",
            type: "str",
            render: "text",
            options: "standardize",
          },
          split: {
            value: "whitespace",
            type: "str",
            render: "text",
            options: "split",
          },
          ngrams: {
            value: "None",
            type: "str",
            render: "text",
            options: "ngrams",
          },
          output_mode: {
            value: "int",
            type: "str",
            render: "text",
            options: "mode",
          },
          output_sequence_length: {
            value: "None",
            type: "str",
            render: "text",
            options: "length",
          },
          pad_to_max_tokens: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          vocabulary: {
            value: "None",
            type: "str",
            render: "text",
            options: "vocabulary",
          },
        },
      },
      {
        name: "Normalization",
        type: { name: "Normalization", object_class: "layers" },
        arguments: {
          axis: {
            value: "required",
            type: "str",
            render: "text",
            options: "axis",
          },
          dtype: {
            value: "None",
            type: "str",
            render: "text",
            options: "dtype",
          },
          mean: { value: "None", type: "str", render: "text", options: "mean" },
          variance: {
            value: "None",
            type: "str",
            render: "text",
            options: "variance",
          },
        },
      },
      {
        name: "CategoryEncoding",
        type: { name: "CategoryEncoding", object_class: "layers" },
        arguments: {
          max_tokens: {
            value: "None",
            type: "str",
            render: "text",
            options: "tokens",
          },
          output_mode: {
            value: "binary",
            type: "str",
            render: "text",
            options: "mode",
          },
          sparse: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
        },
      },
      {
        name: "Hashing",
        type: { name: "Hashing", object_class: "layers" },
        arguments: {
          num_bins: {
            value: "required",
            type: "str",
            render: "text",
            options: "bins",
          },
          salt: { value: "None", type: "str", render: "text", options: "salt" },
          name: { value: "None", type: "str", render: "text", options: "name" },
        },
      },
      {
        name: "Discretization",
        type: { name: "Discretization", object_class: "layers" },
        arguments: {
          bins: {
            value: "required",
            type: "str",
            render: "text",
            options: "bins",
          },
        },
      },
      {
        name: "StringLookup",
        type: { name: "StringLookup", object_class: "layers" },
        arguments: {
          max_tokens: {
            value: "None",
            type: "str",
            render: "text",
            options: "tokens",
          },
          num_oov_indices: {
            value: "1",
            type: "int",
            render: "text",
            options: "indices",
          },
          mask_token: {
            value: "",
            type: "str",
            render: "text",
            options: "token",
          },
          oov_token: {
            value: "[UNK]",
            type: "str",
            render: "text",
            options: "token",
          },
          vocabulary: {
            value: "None",
            type: "str",
            render: "text",
            options: "vocabulary",
          },
          encoding: {
            value: "None",
            type: "str",
            render: "text",
            options: "encoding",
          },
          invert: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
        },
      },
      {
        name: "IntegerLookup",
        type: { name: "IntegerLookup", object_class: "layers" },
        arguments: {
          max_values: {
            value: "None",
            type: "str",
            render: "text",
            options: "values",
          },
          num_oov_indices: {
            value: "1",
            type: "int",
            render: "text",
            options: "indices",
          },
          mask_value: {
            value: "0",
            type: "int",
            render: "text",
            options: "value",
          },
          oov_value: {
            value: "required",
            type: "str",
            render: "text",
            options: "value",
          },
          vocabulary: {
            value: "None",
            type: "str",
            render: "text",
            options: "vocabulary",
          },
          invert: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
        },
      },
      {
        name: "CategoryCrossing",
        type: { name: "CategoryCrossing", object_class: "layers" },
        arguments: {
          depth: {
            value: "None",
            type: "str",
            render: "text",
            options: "depth",
          },
          name: { value: "None", type: "str", render: "text", options: "name" },
          separator: {
            value: "None",
            type: "str",
            render: "text",
            options: "separator",
          },
        },
      },
      {
        name: "Resizing",
        type: { name: "Resizing", object_class: "layers" },
        arguments: {
          height: {
            value: "required",
            type: "str",
            render: "text",
            options: "height",
          },
          width: {
            value: "required",
            type: "str",
            render: "text",
            options: "width",
          },
          interpolation: {
            value: "bilinear",
            type: "str",
            render: "text",
            options: "interpolation",
          },
          name: { value: "None", type: "str", render: "text", options: "name" },
        },
      },
      {
        name: "Rescaling",
        type: { name: "Rescaling", object_class: "layers" },
        arguments: {
          scale: {
            value: "required",
            type: "str",
            render: "text",
            options: "scale",
          },
          offset: {
            value: "0",
            type: "int",
            render: "text",
            options: "offset",
          },
          name: { value: "None", type: "str", render: "text", options: "name" },
        },
      },
      {
        name: "CenterCrop",
        type: { name: "CenterCrop", object_class: "layers" },
        arguments: {
          height: {
            value: "required",
            type: "str",
            render: "text",
            options: "height",
          },
          width: {
            value: "required",
            type: "str",
            render: "text",
            options: "width",
          },
          name: { value: "None", type: "str", render: "text", options: "name" },
        },
      },
      {
        name: "RandomCrop",
        type: { name: "RandomCrop", object_class: "layers" },
        arguments: {
          height: {
            value: "required",
            type: "str",
            render: "text",
            options: "height",
          },
          width: {
            value: "required",
            type: "str",
            render: "text",
            options: "width",
          },
          seed: { value: "None", type: "str", render: "text", options: "seed" },
          name: { value: "None", type: "str", render: "text", options: "name" },
        },
      },
      {
        name: "RandomFlip",
        type: { name: "RandomFlip", object_class: "layers" },
        arguments: {
          mode: {
            value: "horizontal_and_vertical",
            type: "str",
            render: "text",
            options: "mode",
          },
          seed: { value: "None", type: "str", render: "text", options: "seed" },
          name: { value: "None", type: "str", render: "text", options: "name" },
        },
      },
      {
        name: "RandomTranslation",
        type: { name: "RandomTranslation", object_class: "layers" },
        arguments: {
          height_factor: {
            value: "required",
            type: "str",
            render: "text",
            options: "factor",
          },
          width_factor: {
            value: "required",
            type: "str",
            render: "text",
            options: "factor",
          },
          fill_mode: {
            value: "reflect",
            type: "str",
            render: "text",
            options: "mode",
          },
          interpolation: {
            value: "bilinear",
            type: "str",
            render: "text",
            options: "interpolation",
          },
          seed: { value: "None", type: "str", render: "text", options: "seed" },
          name: { value: "None", type: "str", render: "text", options: "name" },
          fill_value: {
            value: "0",
            type: "int",
            render: "text",
            options: "value",
          },
        },
      },
      {
        name: "RandomRotation",
        type: { name: "RandomRotation", object_class: "layers" },
        arguments: {
          factor: {
            value: "required",
            type: "str",
            render: "text",
            options: "factor",
          },
          fill_mode: {
            value: "reflect",
            type: "str",
            render: "text",
            options: "mode",
          },
          interpolation: {
            value: "bilinear",
            type: "str",
            render: "text",
            options: "interpolation",
          },
          seed: { value: "None", type: "str", render: "text", options: "seed" },
          name: { value: "None", type: "str", render: "text", options: "name" },
          fill_value: {
            value: "0",
            type: "int",
            render: "text",
            options: "value",
          },
        },
      },
      {
        name: "RandomZoom",
        type: { name: "RandomZoom", object_class: "layers" },
        arguments: {
          height_factor: {
            value: "required",
            type: "str",
            render: "text",
            options: "factor",
          },
          width_factor: {
            value: "None",
            type: "str",
            render: "text",
            options: "factor",
          },
          fill_mode: {
            value: "reflect",
            type: "str",
            render: "text",
            options: "mode",
          },
          interpolation: {
            value: "bilinear",
            type: "str",
            render: "text",
            options: "interpolation",
          },
          seed: { value: "None", type: "str", render: "text", options: "seed" },
          name: { value: "None", type: "str", render: "text", options: "name" },
          fill_value: {
            value: "0",
            type: "int",
            render: "text",
            options: "value",
          },
        },
      },
      {
        name: "RandomHeight",
        type: { name: "RandomHeight", object_class: "layers" },
        arguments: {
          factor: {
            value: "required",
            type: "str",
            render: "text",
            options: "factor",
          },
          interpolation: {
            value: "bilinear",
            type: "str",
            render: "text",
            options: "interpolation",
          },
          seed: { value: "None", type: "str", render: "text", options: "seed" },
          name: { value: "None", type: "str", render: "text", options: "name" },
        },
      },
      {
        name: "RandomWidth",
        type: { name: "RandomWidth", object_class: "layers" },
        arguments: {
          factor: {
            value: "required",
            type: "str",
            render: "text",
            options: "factor",
          },
          interpolation: {
            value: "bilinear",
            type: "str",
            render: "text",
            options: "interpolation",
          },
          seed: { value: "None", type: "str", render: "text", options: "seed" },
          name: { value: "None", type: "str", render: "text", options: "name" },
        },
      },
    ],
  },
  normalization_layers: {
    name: "Normalization layers",
    layers: [
      {
        name: "BatchNormalization",
        type: { name: "BatchNormalization", object_class: "layers" },
        arguments: {
          axis: {
            value: "required",
            type: "str",
            render: "text",
            options: "axis",
          },
          momentum: {
            value: "0",
            type: "int",
            render: "text",
            options: "momentum",
          },
          99: { value: "required", type: "str", render: "text", options: "99" },
          epsilon: {
            value: "0",
            type: "int",
            render: "text",
            options: "epsilon",
          },
          "001": {
            value: "required",
            type: "str",
            render: "text",
            options: "001",
          },
          center: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          scale: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          beta_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          gamma_initializer: {
            value: "ones",
            type: "str",
            render: "list",
            options: "initializer",
          },
          moving_mean_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          moving_variance_initializer: {
            value: "ones",
            type: "str",
            render: "list",
            options: "initializer",
          },
          beta_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          gamma_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          beta_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          gamma_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          renorm: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
          renorm_clipping: {
            value: "None",
            type: "str",
            render: "text",
            options: "clipping",
          },
          renorm_momentum: {
            value: "0",
            type: "int",
            render: "text",
            options: "momentum",
          },
          fused: {
            value: "None",
            type: "str",
            render: "text",
            options: "fused",
          },
          trainable: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          virtual_batch_size: {
            value: "None",
            type: "str",
            render: "text",
            options: "size",
          },
          adjustment: {
            value: "None",
            type: "str",
            render: "text",
            options: "adjustment",
          },
          name: { value: "None", type: "str", render: "text", options: "name" },
        },
      },
      {
        name: "LayerNormalization",
        type: { name: "LayerNormalization", object_class: "layers" },
        arguments: {
          axis: {
            value: "required",
            type: "str",
            render: "text",
            options: "axis",
          },
          epsilon: {
            value: "0",
            type: "int",
            render: "text",
            options: "epsilon",
          },
          "001": {
            value: "required",
            type: "str",
            render: "text",
            options: "001",
          },
          center: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          scale: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          beta_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          gamma_initializer: {
            value: "ones",
            type: "str",
            render: "list",
            options: "initializer",
          },
          beta_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          gamma_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          beta_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          gamma_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          trainable: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          name: { value: "None", type: "str", render: "text", options: "name" },
        },
      },
    ],
  },
  regularization_layers: {
    name: "Regularization layers",
    layers: [
      {
        name: "Dropout",
        type: { name: "Dropout", object_class: "layers" },
        arguments: {
          rate: {
            value: "required",
            type: "str",
            render: "text",
            options: "rate",
          },
          noise_shape: {
            value: "None",
            type: "str",
            render: "text",
            options: "shape",
          },
          seed: { value: "None", type: "str", render: "text", options: "seed" },
        },
      },
      {
        name: "SpatialDropout1D",
        type: { name: "SpatialDropout1D", object_class: "layers" },
        arguments: {
          rate: {
            value: "required",
            type: "str",
            render: "text",
            options: "rate",
          },
        },
      },
      {
        name: "SpatialDropout2D",
        type: { name: "SpatialDropout2D", object_class: "layers" },
        arguments: {
          rate: {
            value: "required",
            type: "str",
            render: "text",
            options: "rate",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "SpatialDropout3D",
        type: { name: "SpatialDropout3D", object_class: "layers" },
        arguments: {
          rate: {
            value: "required",
            type: "str",
            render: "text",
            options: "rate",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "GaussianDropout",
        type: { name: "GaussianDropout", object_class: "layers" },
        arguments: {
          rate: {
            value: "required",
            type: "str",
            render: "text",
            options: "rate",
          },
        },
      },
      {
        name: "GaussianNoise",
        type: { name: "GaussianNoise", object_class: "layers" },
        arguments: {
          stddev: {
            value: "required",
            type: "str",
            render: "text",
            options: "stddev",
          },
        },
      },
      {
        name: "ActivityRegularization",
        type: { name: "ActivityRegularization", object_class: "layers" },
        arguments: {
          l1: { value: "0", type: "int", render: "text", options: "l1" },
          l2: { value: "0", type: "int", render: "text", options: "l2" },
        },
      },
      {
        name: "AlphaDropout",
        type: { name: "AlphaDropout", object_class: "layers" },
        arguments: {
          rate: {
            value: "required",
            type: "str",
            render: "text",
            options: "rate",
          },
          noise_shape: {
            value: "None",
            type: "str",
            render: "text",
            options: "shape",
          },
          seed: { value: "None", type: "str", render: "text", options: "seed" },
        },
      },
    ],
  },
  attention_layers: {
    name: "Attention layers",
    layers: [
      {
        name: "MultiHeadAttention",
        type: { name: "MultiHeadAttention", object_class: "layers" },
        arguments: {
          num_heads: {
            value: "required",
            type: "str",
            render: "text",
            options: "heads",
          },
          key_dim: {
            value: "required",
            type: "str",
            render: "text",
            options: "dim",
          },
          value_dim: {
            value: "None",
            type: "str",
            render: "text",
            options: "dim",
          },
          dropout: {
            value: "0",
            type: "int",
            render: "text",
            options: "dropout",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          output_shape: {
            value: "None",
            type: "str",
            render: "text",
            options: "shape",
          },
          attention_axes: {
            value: "None",
            type: "str",
            render: "text",
            options: "axes",
          },
          kernel_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          kernel_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          kernel_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
        },
      },
      {
        name: "Attention",
        type: { name: "Attention", object_class: "layers" },
        arguments: {
          use_scale: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
        },
      },
      {
        name: "AdditiveAttention",
        type: { name: "AdditiveAttention", object_class: "layers" },
        arguments: {
          use_scale: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
        },
      },
    ],
  },
  reshaping_layers: {
    name: "Reshaping layers",
    layers: [
      {
        name: "Reshape",
        type: { name: "Reshape", object_class: "layers" },
        arguments: {
          target_shape: {
            value: "required",
            type: "str",
            render: "text",
            options: "shape",
          },
        },
      },
      {
        name: "Flatten",
        type: { name: "Flatten", object_class: "layers" },
        arguments: {
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "RepeatVector",
        type: { name: "RepeatVector", object_class: "layers" },
        arguments: {},
      },
      {
        name: "Permute",
        type: { name: "Permute", object_class: "layers" },
        arguments: {
          dims: {
            value: "required",
            type: "str",
            render: "text",
            options: "dims",
          },
        },
      },
      {
        name: "Cropping1D",
        type: { name: "Cropping1D", object_class: "layers" },
        arguments: {
          cropping: {
            value: "(1, 1)",
            type: "tuple",
            render: "text",
            options: "cropping",
          },
        },
      },
      {
        name: "Cropping2D",
        type: { name: "Cropping2D", object_class: "layers" },
        arguments: {
          cropping: {
            value: "required",
            type: "str",
            render: "text",
            options: "cropping",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "Cropping3D",
        type: { name: "Cropping3D", object_class: "layers" },
        arguments: {
          cropping: {
            value: "required",
            type: "str",
            render: "text",
            options: "cropping",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "UpSampling1D",
        type: { name: "UpSampling1D", object_class: "layers" },
        arguments: {
          size: { value: "2", type: "int", render: "text", options: "size" },
        },
      },
      {
        name: "UpSampling2D",
        type: { name: "UpSampling2D", object_class: "layers" },
        arguments: {
          size: {
            value: "(2, 2)",
            type: "tuple",
            render: "text",
            options: "size",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
          interpolation: {
            value: "nearest",
            type: "str",
            render: "text",
            options: "interpolation",
          },
        },
      },
      {
        name: "UpSampling3D",
        type: { name: "UpSampling3D", object_class: "layers" },
        arguments: {
          size: {
            value: "(2, 2, 2)",
            type: "tuple",
            render: "text",
            options: "size",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "ZeroPadding1D",
        type: { name: "ZeroPadding1D", object_class: "layers" },
        arguments: {
          padding: {
            value: "1",
            type: "int",
            render: "text",
            options: "padding",
          },
        },
      },
      {
        name: "ZeroPadding2D",
        type: { name: "ZeroPadding2D", object_class: "layers" },
        arguments: {
          padding: {
            value: "(1, 1)",
            type: "tuple",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
      {
        name: "ZeroPadding3D",
        type: { name: "ZeroPadding3D", object_class: "layers" },
        arguments: {
          padding: {
            value: "(1, 1, 1)",
            type: "tuple",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
        },
      },
    ],
  },
  merging_layers: {
    name: "Merging layers",
    layers: [
      {
        name: "Concatenate",
        type: { name: "Concatenate", object_class: "layers" },
        arguments: {
          axis: {
            value: "required",
            type: "str",
            render: "text",
            options: "axis",
          },
        },
      },
      {
        name: "Average",
        type: { name: "Average", object_class: "layers" },
        arguments: {},
      },
      {
        name: "Maximum",
        type: { name: "Maximum", object_class: "layers" },
        arguments: {},
      },
      {
        name: "Minimum",
        type: { name: "Minimum", object_class: "layers" },
        arguments: {},
      },
      {
        name: "Add",
        type: { name: "Add", object_class: "layers" },
        arguments: {},
      },
      {
        name: "Subtract",
        type: { name: "Subtract", object_class: "layers" },
        arguments: {},
      },
      {
        name: "Multiply",
        type: { name: "Multiply", object_class: "layers" },
        arguments: {},
      },
      {
        name: "Dot",
        type: { name: "Dot", object_class: "layers" },
        arguments: {
          axes: {
            value: "required",
            type: "str",
            render: "text",
            options: "axes",
          },
          normalize: {
            value: "False",
            type: "bool",
            render: "list",
            options: "bool",
          },
        },
      },
    ],
  },
  locally_connected_layers: {
    name: "Locally-connected layers",
    layers: [
      {
        name: "LocallyConnected1D",
        type: { name: "LocallyConnected1D", object_class: "layers" },
        arguments: {
          filters: {
            value: "required",
            type: "str",
            render: "text",
            options: "filters",
          },
          kernel_size: {
            value: "required",
            type: "str",
            render: "text",
            options: "size",
          },
          strides: {
            value: "1",
            type: "int",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
          activation: {
            value: "None",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          kernel_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          kernel_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          kernel_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          implementation: {
            value: "1",
            type: "int",
            render: "text",
            options: "implementation",
          },
        },
      },
      {
        name: "LocallyConnected2D",
        type: { name: "LocallyConnected2D", object_class: "layers" },
        arguments: {
          filters: {
            value: "required",
            type: "str",
            render: "text",
            options: "filters",
          },
          kernel_size: {
            value: "required",
            type: "str",
            render: "text",
            options: "size",
          },
          strides: {
            value: "(1, 1)",
            type: "tuple",
            render: "text",
            options: "strides",
          },
          padding: {
            value: "valid",
            type: "str",
            render: "text",
            options: "padding",
          },
          data_format: {
            value: "None",
            type: "str",
            render: "text",
            options: "format",
          },
          activation: {
            value: "None",
            type: "str",
            render: "list",
            options: "activation",
          },
          use_bias: {
            value: "True",
            type: "bool",
            render: "list",
            options: "bool",
          },
          kernel_initializer: {
            value: "glorot_uniform",
            type: "str",
            render: "list",
            options: "initializer",
          },
          bias_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          kernel_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          bias_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          activity_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          kernel_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          bias_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          implementation: {
            value: "1",
            type: "int",
            render: "text",
            options: "implementation",
          },
        },
      },
    ],
  },
  activation_layers: {
    name: "Activation layers",
    layers: [
      {
        name: "ReLU",
        type: { name: "ReLU", object_class: "layers" },
        arguments: {
          max_value: {
            value: "None",
            type: "str",
            render: "text",
            options: "value",
          },
          negative_slope: {
            value: "0",
            type: "int",
            render: "text",
            options: "slope",
          },
          threshold: {
            value: "0",
            type: "int",
            render: "text",
            options: "threshold",
          },
        },
      },
      {
        name: "Softmax",
        type: { name: "Softmax", object_class: "layers" },
        arguments: {
          axis: {
            value: "required",
            type: "str",
            render: "text",
            options: "axis",
          },
        },
      },
      {
        name: "LeakyReLU",
        type: { name: "LeakyReLU", object_class: "layers" },
        arguments: {
          alpha: { value: "0", type: "int", render: "text", options: "alpha" },
        },
      },
      {
        name: "PReLU",
        type: { name: "PReLU", object_class: "layers" },
        arguments: {
          alpha_initializer: {
            value: "zeros",
            type: "str",
            render: "list",
            options: "initializer",
          },
          alpha_regularizer: {
            value: "None",
            type: "str",
            render: "list",
            options: "regularizer",
          },
          alpha_constraint: {
            value: "None",
            type: "str",
            render: "list",
            options: "constraint",
          },
          shared_axes: {
            value: "None",
            type: "str",
            render: "text",
            options: "axes",
          },
        },
      },
      {
        name: "ELU",
        type: { name: "ELU", object_class: "layers" },
        arguments: {
          alpha: { value: "1", type: "int", render: "text", options: "alpha" },
        },
      },
      {
        name: "ThresholdedReLU",
        type: { name: "ThresholdedReLU", object_class: "layers" },
        arguments: {
          theta: { value: "1", type: "int", render: "text", options: "theta" },
        },
      },
    ],
  },
  build_tools: {
    name: "Build Tools",
    layers: [
      {
        name: "Model",
        type: { name: "Model", object_class: "models" },
        arguments: {},
      },
      {
        name: "Compile",
        type: { name: "Compile", object_class: "models" },
        arguments: {
          optmizer: {
            value: "rmsprop",
            type: "str",
            render: "list",
            options: "optimizer",
          },
          loss: { value: "None", type: "str", render: "list", options: "loss" },
          metrics: {
            value: [],
            type: "str",
            render: "checkbox",
            options: "metrics",
          },
        },
      },
      {
        name: "Train",
        type: { name: "Train", object_class: "models" },
        arguments: {
          batch_size: {
            value: "8",
            type: "int",
            render: "text",
            options: "batch_size",
          },
          epochs: {
            value: "1",
            type: "int",
            render: "text",
            options: "epochs",
          },
        },
      },
    ],
  },
  applications: applications,
  optimizers: optimizers,
  callbaacks: callbaacks,
  custom: {
    name: "Custom",
    layers: [
      {
        name: "Node",
        type: {
          name: "Custom",
          object_class: "node",
        },
        arguments: {
          code: {
            value: `def __id__(inbound:list=[])->None:
  ...
`,
            type: "code",
            render: "code",
          },
        },
      },
      {
        name: "Imports",
        type: { name: "Custom", object_class: "imports" },
        arguments: {},
      },
    ],
  },
};

export default layers;
